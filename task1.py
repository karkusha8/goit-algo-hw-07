from collections import UserDict
from datetime import datetime, timedelta



class Field:
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ø–æ–ª—ñ–≤ –∑–∞–ø–∏—Å—É (—ñ–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–æ—â–æ)."""

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field):
    """–ö–ª–∞—Å –¥–ª—è —ñ–º–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    pass


class Phone(Field):
    """–ö–ª–∞—Å –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ñ–æ—Ä–º–∞—Ç—É (10 —Ü–∏—Ñ—Ä)."""

    def __init__(self, value):
        if not value.isdigit() or len(value) != 10:
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä.")
        super().__init__(value)


class Birthday(Field):
    """–ö–ª–∞—Å –¥–ª—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY."""

    def __init__(self, value):
        try:
            datetime.strptime(value, "%d.%m.%Y")  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
            super().__init__(value)
        except ValueError:
            raise ValueError("–î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY")



class Record:
    """–ö–ª–∞—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É: —ñ–º'—è + —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ + –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è."""

    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def add_phone(self, phone):
        phone_obj = Phone(phone)
        self.phones.append(phone_obj)

    def remove_phone(self, phone):
        phone_obj = self.find_phone(phone)
        if phone_obj:
            self.phones.remove(phone_obj)

    def edit_phone(self, old_phone, new_phone):
        phone_obj = self.find_phone(old_phone)
        if phone_obj:
            self.add_phone(new_phone)
            self.remove_phone(phone_obj)
        else:
            raise ValueError("–°—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    def find_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                return p
        return None

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

    def __str__(self):
        phones_list = '; '.join(p.value for p in self.phones) if self.phones else "–Ω–µ–º–∞—î –Ω–æ–º–µ—Ä—ñ–≤"
        bday = self.birthday.value if self.birthday else "–Ω–µ–º–∞—î"
        return f"–ö–æ–Ω—Ç–∞–∫—Ç: {self.name.value}, —Ç–µ–ª–µ—Ñ–æ–Ω–∏: {phones_list}, –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {bday}"



class AddressBook(UserDict):
    """–ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤."""

    def add_record(self, record: Record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self, days=7):
        today = datetime.today().date()
        result = []

        for record in self.data.values():
            if not record.birthday:
                continue

            bday = datetime.strptime(record.birthday.value, "%d.%m.%Y").date()
            bday_this_year = bday.replace(year=today.year)

            if bday_this_year < today:
                bday_this_year = bday_this_year.replace(year=today.year + 1)

            diff = (bday_this_year - today).days

            if 0 <= diff <= days:
                # –Ø–∫—â–æ –≤–∏—Ö—ñ–¥–Ω–∏–π ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
                while bday_this_year.weekday() >= 5:
                    bday_this_year += timedelta(days=1)

                result.append({
                    "name": record.name.value,
                    "birthday": bday_this_year.strftime("%d.%m.%Y")
                })

        return result

    def __str__(self):
        if not self.data:
            return "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        return "\n".join(str(record) for record in self.data.values())



def input_error(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except KeyError:
            return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        except ValueError as e:
            return str(e)
        except IndexError:
            return "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏."
    return wrapper



def parse_input(user_input):
    command, *args = user_input.split()
    command = command.strip().lower()
    return command, args



@input_error
def add_contact(args, book: AddressBook):
    name, phone = args
    record = book.find(name)
    if not record:
        record = Record(name)
        record.add_phone(phone)
        book.add_record(record)
        return f"–ö–æ–Ω—Ç–∞–∫—Ç {name} –¥–æ–¥–∞–Ω–æ –∑ –Ω–æ–º–µ—Ä–æ–º {phone}."
    else:
        record.phones.clear()
        record.add_phone(phone)
        return f"–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—É {name} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {phone}."


@input_error
def change_contact(args, book: AddressBook):
    name, old_phone, new_phone = args
    record = book.find(name)
    if record:
        record.edit_phone(old_phone, new_phone)
        return f"–£ –∫–æ–Ω—Ç–∞–∫—Ç—ñ {name} –Ω–æ–º–µ—Ä {old_phone} –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_phone}."
    else:
        raise KeyError


@input_error
def show_phone(args, book: AddressBook):
    name = args[0]
    record = book.find(name)
    if record:
        return str(record)
    else:
        raise KeyError


@input_error
def delete_contact(args, book: AddressBook):
    name = args[0]
    if book.find(name):
        book.delete(name)
        return f"–ö–æ–Ω—Ç–∞–∫—Ç {name} –≤–∏–¥–∞–ª–µ–Ω–æ."
    else:
        raise KeyError


def show_all(book: AddressBook):
    return str(book)


@input_error
def add_birthday(args, book: AddressBook):
    name, birthday = args
    record = book.find(name)
    if not record:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    record.add_birthday(birthday)
    return f"–î–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {name} –¥–æ–¥–∞–Ω–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {birthday}."


@input_error
def show_birthday(args, book: AddressBook):
    name = args[0]
    record = book.find(name)
    if not record:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    if not record.birthday:
        return f"–£ –∫–æ–Ω—Ç–∞–∫—Ç—É {name} –Ω–µ–º–∞—î –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è."
    return f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}: {record.birthday.value}"


@input_error
def birthdays(args, book: AddressBook):
    upcoming = book.get_upcoming_birthdays()
    if not upcoming:
        return "–ù–µ–º–∞—î –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤."
    lines = [f"{user['name']}: {user['birthday']}" for user in upcoming]
    return "\n".join(lines)



def main():
    book = AddressBook()
    print("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≤–∞—à–æ–≥–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞! üòä")

    while True:
        user_input = input("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É: ")
        if not user_input.strip():
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É.")
            continue

        try:
            command, args = parse_input(user_input)
        except ValueError:
            print("–ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            continue

        if command in ["close", "exit"]:
            print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã")
            break
        elif command == "hello":
            print("–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? üñêÔ∏è")
        elif command == "add":
            print(add_contact(args, book))
        elif command == "change":
            print(change_contact(args, book))
        elif command == "phone":
            print(show_phone(args, book))
        elif command == "delete":
            print(delete_contact(args, book))
        elif command == "all":
            print(show_all(book))
        elif command == "add-birthday":
            print(add_birthday(args, book))
        elif command == "show-birthday":
            print(show_birthday(args, book))
        elif command == "birthdays":
            print(birthdays(args, book))
        else:
            print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ: add, change, phone, delete, all, "
                  "add-birthday, show-birthday, birthdays, hello, exit.")


if __name__ == "__main__":
    main()
